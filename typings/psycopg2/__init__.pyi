"""Type stubs for psycopg2."""

from typing import Any, Dict, List, Optional, Tuple, Union

# Exceptions
class Error(Exception): ...
class Warning(Exception): ...
class InterfaceError(Error): ...
class DatabaseError(Error): ...
class InternalError(DatabaseError): ...
class OperationalError(DatabaseError): ...
class ProgrammingError(DatabaseError): ...
class IntegrityError(DatabaseError): ...
class DataError(DatabaseError): ...
class NotSupportedError(DatabaseError): ...

# Connection
class connection:
    def __init__(self, dsn: str, **kwargs: Any) -> None: ...
    def cursor(self, name: Optional[str] = None) -> cursor: ...
    def commit(self) -> None: ...
    def rollback(self) -> None: ...
    def close(self) -> None: ...
    def set_session(
        self,
        isolation_level: Optional[str] = None,
        readonly: Optional[bool] = None,
        deferrable: Optional[bool] = None,
        autocommit: Optional[bool] = None,
    ) -> None: ...
    def autocommit(self) -> bool: ...
    def closed(self) -> bool: ...
    def cancel(self) -> None: ...
    def reset(self) -> None: ...
    def set_client_encoding(self, encoding: str) -> None: ...
    def get_transaction_status(self) -> int: ...
    def get_parameter_status(self, parameter: str) -> Optional[str]: ...
    def get_backend_pid(self) -> int: ...
    def lobject(self, oid: int = 0, mode: str = "", new_oid: int = 0) -> Any: ...
    def poll(self) -> Any: ...
    def fileno(self) -> int: ...
    def isexecuting(self) -> bool: ...
    def notifies(self) -> List[Any]: ...
    def set_isolation_level(self, isolation_level: int) -> None: ...
    def get_dsn_parameters(self) -> Dict[str, str]: ...
    def __enter__(self) -> "connection": ...
    def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None: ...

# Cursor
class cursor:
    def execute(self, query: str, vars: Optional[Union[Tuple, Dict, List]] = None) -> Any: ...
    def executemany(self, query: str, vars_list: List[Union[Tuple, Dict, List]]) -> Any: ...
    def callproc(self, procname: str, parameters: Optional[List] = None) -> Any: ...
    def mogrify(self, query: str, vars: Optional[Union[Tuple, Dict, List]] = None) -> bytes: ...
    def fetchone(self) -> Optional[Tuple]: ...
    def fetchmany(self, size: Optional[int] = None) -> List[Tuple]: ...
    def fetchall(self) -> List[Tuple]: ...
    def scroll(self, value: int, mode: str = "relative") -> None: ...
    def arraysize(self) -> int: ...
    def close(self) -> None: ...
    def connection(self) -> connection: ...
    def name(self) -> str: ...
    def description(self) -> Optional[List[Any]]: ...
    def rowcount(self) -> int: ...
    def rownumber(self) -> Optional[int]: ...
    def statusmessage(self) -> str: ...
    def tzinfo_factory(self) -> Any: ...
    def nextset(self) -> Optional[bool]: ...
    def setinputsizes(self, sizes: List[Any]) -> None: ...
    def setoutputsize(self, size: int, column: Optional[int] = None) -> None: ...
    def __iter__(self) -> "cursor": ...
    def __next__(self) -> Tuple: ...

# Functions
def connect(dsn: str = "", **kwargs: Any) -> connection: ...
